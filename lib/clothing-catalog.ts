// Shared clothing catalog for the entire application
export interface ClothingItem {
  id: string;
  name: string;
  brand: string;
  category: 'tops' | 'bottoms' | 'dresses' | 'accessories' | 'outerwear' | 'shoes';
  color: string;
  fabric: string;
  size?: string;
  url: string; // 3D model URL
  image?: string; // 2D preview image
  position?: [number, number, number];
  scale?: number | [number, number, number];
  rotation?: [number, number, number];
  physics?: {
    mass: number;
    elasticity: number;
    friction: number;
    dampening: number;
  };
  fitData?: {
    chest?: 'perfect' | 'snug' | 'tight';
    waist?: 'perfect' | 'snug' | 'tight';
    hips?: 'perfect' | 'snug' | 'tight';
  };
  isWishlisted?: boolean;
  isNew?: boolean;
  description?: string;
}

export interface SavedOutfit {
  id: string;
  name: string;
  items: ClothingItem[];
  createdAt: Date;
  description?: string;
}

// Dynamic model discovery - simply add your .glb filenames here
// The system will automatically create catalog entries for each model
const discoverAvailableModels = (): string[] => {
  // Add your 3D model filenames here (without the .glb extension)
  // The system will auto-generate appropriate catalog entries
  const modelNames = [
    'tshirt',
    // 'jacket', 
    // 'jeans',
    // 'dress',
    // 'shoes',
    // 'hoodie',
    // 'skirt',
    // 'blazer',
    'cargopants',    
    // 'sneakers',
    // 'sweater',
    // 'shorts',
    // 'boots',
    // 'cardigan',
    // 'leggings',
    // 'polo',
    // 'chinos',
    // 'bomber',
    // 'trench',
    // 'loafers'
  ];
  
  return modelNames.map(name => `/${name}.glb`);
};

// Dynamic clothing catalog - loads available 3D models
export const getClothingCatalog = (): ClothingItem[] => {
  const availableModels = discoverAvailableModels();

  // Auto-generate catalog items from available models
  const autoGeneratedItems: ClothingItem[] = availableModels.map((modelUrl) => {
    const fileName = modelUrl.replace('/', '').replace('.glb', '');
    const itemId = fileName.toLowerCase().replace(/\s+/g, '-');
    
    // Determine category based on item name
    const getCategory = (name: string): ClothingItem['category'] => {
      const lowerName = name.toLowerCase();
      if (lowerName.includes('shirt') || lowerName.includes('tshirt') || lowerName.includes('hoodie') || 
          lowerName.includes('sweater') || lowerName.includes('cardigan') || lowerName.includes('top')) {
        return 'tops';
      }
      if (lowerName.includes('pants') || lowerName.includes('jeans') || lowerName.includes('shorts') || 
          lowerName.includes('leggings') || lowerName.includes('trouser')) {
        return 'bottoms';
      }
      if (lowerName.includes('dress') || lowerName.includes('gown')) {
        return 'dresses';
      }
      if (lowerName.includes('jacket') || lowerName.includes('blazer') || lowerName.includes('coat') || 
          lowerName.includes('cardigan')) {
        return 'outerwear';
      }
      if (lowerName.includes('shoe') || lowerName.includes('sneaker') || lowerName.includes('boot') || 
          lowerName.includes('sandal')) {
        return 'shoes';
      }
      return 'accessories';
    };

    // Generate display name from filename
    const getDisplayName = (name: string): string => {
      return name
        .replace(/([A-Z])/g, ' $1') // Add space before capital letters
        .replace(/^./, str => str.toUpperCase()) // Capitalize first letter
        .replace(/\b\w/g, l => l.toUpperCase()) // Capitalize each word
        .trim();
    };

    // Generate brand names based on category
    const getBrand = (category: ClothingItem['category']): string => {
      const brands = {
        tops: ['StyleCorp', 'ComfortWear', 'UrbanThreads', 'CasualCo'],
        bottoms: ['DenimCo', 'FitPants', 'ComfortFit', 'UrbanWear'],
        dresses: ['FloralDesigns', 'ElegantWear', 'StyleDress', 'ChicFashion'],
        outerwear: ['RetroWear', 'WarmCoats', 'StyleJackets', 'UrbanOuterwear'],
        shoes: ['FootComfort', 'WalkEasy', 'StyleSteps', 'ComfortFoot'],
        accessories: ['AccessoryHub', 'StylePlus', 'FashionExtras', 'ChicAccessories']
      };
      return brands[category][Math.floor(Math.random() * brands[category].length)];
    };

    // Generate colors based on common clothing colors
    const getColor = (): string => {
      const colors = ['Black', 'White', 'Blue', 'Gray', 'Navy', 'Brown', 'Green', 'Red', 'Pink', 'Beige'];
      return colors[Math.floor(Math.random() * colors.length)];
    };

    // Generate fabric based on category
    const getFabric = (category: ClothingItem['category']): string => {
      const fabrics = {
        tops: ['Cotton', 'Cotton Blend', 'Polyester', 'Linen'],
        bottoms: ['Denim', 'Cotton', 'Cotton Blend', 'Polyester'],
        dresses: ['Cotton', 'Polyester', 'Silk', 'Cotton Blend'],
        outerwear: ['Denim', 'Polyester', 'Wool', 'Cotton'],
        shoes: ['Leather', 'Synthetic', 'Canvas', 'Suede'],
        accessories: ['Leather', 'Fabric', 'Metal', 'Synthetic']
      };
      return fabrics[category][Math.floor(Math.random() * fabrics[category].length)];
    };

    const category = getCategory(fileName);
    
    return {
      id: itemId,
      name: getDisplayName(fileName),
      brand: getBrand(category),
      category,
      color: getColor(),
      fabric: getFabric(category),
      size: ['XS', 'S', 'M', 'L', 'XL'][Math.floor(Math.random() * 5)],
      url: modelUrl,
      image: `/${fileName}-preview.jpg`,
      position: category === 'shoes' ? [0, -0.5, 0] : 
                category === 'bottoms' ? [0, -0.2, 0] : 
                category === 'dresses' ? [0, 0, 0] : 
                category === 'outerwear' ? [0, 0.1, 0] : [0, 0, 0], // Tops at chest level
      scale: category === 'shoes' ? 0.8 : 
             category === 'bottoms' ? 1.2 : 
             category === 'outerwear' ? 1.1 : 1,
      physics: {
        mass: category === 'shoes' ? 0.2 : 
               category === 'outerwear' ? 0.15 : 
               category === 'bottoms' ? 0.12 : 0.08,
        elasticity: category === 'shoes' ? 0.3 : 
                   category === 'dresses' ? 0.8 : 0.6,
        friction: category === 'shoes' ? 1.0 : 0.8,
        dampening: category === 'shoes' ? 0.7 : 0.9
      },
      fitData: {
        chest: ['perfect', 'snug', 'tight'][Math.floor(Math.random() * 3)] as 'perfect' | 'snug' | 'tight',
        waist: ['perfect', 'snug', 'tight'][Math.floor(Math.random() * 3)] as 'perfect' | 'snug' | 'tight',
      },
      isNew: Math.random() > 0.7, // 30% chance of being new
      isWishlisted: Math.random() > 0.8, // 20% chance of being wishlisted
      description: `High-quality ${getDisplayName(fileName).toLowerCase()} made from premium ${getFabric(category).toLowerCase()}.`
    };
  });

  return autoGeneratedItems;
};

// Dynamic saved outfits based on available items
export const getSavedOutfits = (): SavedOutfit[] => {
  const catalog = getClothingCatalog();
  
  if (catalog.length === 0) {
    return []; // No outfits if no items available
  }
  
  // Create outfits only from actually available items
  const outfits: SavedOutfit[] = [];
  
  // Try to create a basic outfit if we have items
  if (catalog.length >= 1) {
    outfits.push({
      id: 'basic-look',
      name: 'Basic Look',
      items: [catalog[0]], // Just use the first available item
      createdAt: new Date('2025-01-15'),
      description: 'Simple and versatile look with available items'
    });
  }
  
  // Try to create a combo outfit if we have multiple items
  if (catalog.length >= 2) {
    outfits.push({
      id: 'combo-style',
      name: 'Combo Style',
      items: catalog.slice(0, 2), // Use first two available items
      createdAt: new Date('2025-01-14'),
      description: 'Stylish combination of available pieces'
    });
  }
  
  return outfits;
};